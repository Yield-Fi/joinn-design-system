import StyleDictionary from "style-dictionary";
import fs from "fs";
import path from "path";

// --------------------------
// 1) Clean Output Directory
// --------------------------
function cleanDist() {
  const distDir = path.resolve("build/tailwind");
  try {
    fs.rmSync(distDir, { recursive: true, force: true });
    console.log(`Removed ${distDir}`);
  } catch (err) {
    console.log(`No existing ${distDir} to remove`, err);
  }

  fs.mkdirSync(distDir, { recursive: true });
  console.log(`Created fresh ${distDir}`);
}

// --------------------------
// 2) KebabCase & generateVariableName
// --------------------------
function kebabCase(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}

function generateVariableName(token) {
  const kebabSegments = token.path.map(kebabCase);
  return `--${kebabSegments.join("-")}`;
}

// --------------------------
// 3) Register Formats (with note)
// --------------------------
function prependAutogeneratedNote(content) {
  const dateTime = new Date().toLocaleString();
  return `/* Autogenerated file. Generated at ${dateTime}. Do not edit.*/\n${content}`;
}

StyleDictionary.registerFormat({
  name: "css/base",
  format: ({ dictionary }) => {
    const body = `:root {\n${dictionary.allTokens
      .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
      .join("\n")}\n}`;
    return prependAutogeneratedNote(body);
  },
});

StyleDictionary.registerFormat({
  name: "css/dark",
  format: ({ dictionary }) => {
    const body = `.dark {\n${dictionary.allTokens
      .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
      .join("\n")}\n}`;
    return prependAutogeneratedNote(body);
  },
});

StyleDictionary.registerFormat({
  name: "tailwind/config",
  format({ dictionary }) {
    const tailwindConfig = {
      darkMode: "class",
      content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
      theme: {
        extend: {
          colors: {},
          spacing: {},
          borderRadius: {},
          maxWidth: {},
        },
      },
      plugins: [],
    };

    function setNestedProperty(obj, pathArray, value) {
      let current = obj;
      for (let i = 0; i < pathArray.length; i++) {
        const key = pathArray[i];
        if (i === pathArray.length - 1) {
          current[key] = value;
        } else {
          if (!current[key]) {
            current[key] = {};
          }
          current = current[key];
        }
      }
    }

    function getCSSVarName(token) {
      return `--${token.path.join("-")}`;
    }

    dictionary.allTokens.forEach((token) => {
      const [topLevel, secondLevel, ...rest] = token.path;
      const varName = getCSSVarName(token);
      const varRef = `var(${varName})`;

      if (topLevel === "color") {
        const subPath = token.path.slice(1);
        setNestedProperty(tailwindConfig.theme.extend.colors, subPath, varRef);
      } else if (topLevel === "dimensions") {
        if (secondLevel === "spacing") {
          setNestedProperty(tailwindConfig.theme.extend.spacing, rest, varRef);
        } else if (secondLevel === "borderRadius") {
          setNestedProperty(
            tailwindConfig.theme.extend.borderRadius,
            rest,
            varRef,
          );
        } else if (secondLevel === "maxWidth") {
          setNestedProperty(tailwindConfig.theme.extend.maxWidth, rest, varRef);
        } else {
          // fallback
        }
      }
    });

    const configBody = `/** @type {import('tailwindcss').Config} */
export default ${JSON.stringify(tailwindConfig, null, 2)};
`;
    return prependAutogeneratedNote(configBody);
  },
});

StyleDictionary.registerFormat({
  name: "css/index-file",
  format: () => {
    const body = `
/* Import Generated Design Token Files */
@import "./base.css";
@import "./dark.css";

/* Tailwind Base, Components, and Utilities */
@tailwind base;
@tailwind components;
@tailwind utilities;
`.trimStart();
    return prependAutogeneratedNote(body);
  },
});

// --------------------------
// 4) Built-in transforms
// --------------------------
const defaultTransforms = ["attribute/cti", "color/css", "size/px"];

// --------------------------
// 5) Build Script
// --------------------------
async function buildTokens() {
  cleanDist();

  // A) Base/Light
  {
    console.log("Building base theme...");
    const SD = new StyleDictionary({
      source: ["tokens/**/*.json", "!tokens/**/*.dark.json"],
      log: {
        verbosity: "verbose",
      },
      platforms: {
        base: {
          transformGroup: "js",
          transforms: defaultTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "base.css",
              format: "css/base",
            },
          ],
        },
        tailwind: {
          transformGroup: "js",
          transforms: defaultTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "tailwind.config.js",
              format: "tailwind/config",
            },
            {
              destination: "index.css",
              format: "css/index-file",
            },
          ],
        },
      },
    });
    SD.buildAllPlatforms();
    console.log("Base theme built!\n");
  }

  // B) Dark
  {
    console.log("Building dark theme...");
    const SD = new StyleDictionary({
      source: ["!tokens/**/*.json", "tokens/**/*.dark.json"],
      log: {
        verbosity: "verbose",
      },
      platforms: {
        base: {
          transformGroup: "js",
          transforms: defaultTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "dark.css",
              format: "css/dark",
            },
          ],
        },
      },
    });
    SD.buildAllPlatforms();
    console.log("Dark theme built!\n");
  }

  console.log("All builds finished!");
}

buildTokens().catch((err) => {
  console.error("Error building tokens:", err);
  process.exit(1);
});
