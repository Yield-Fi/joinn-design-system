import StyleDictionary from "style-dictionary";
import fs from "fs";
import path from "path";
import { logger } from "../../utils/logger.js";

// --------------------------
// 1) Clean Output Directory
// --------------------------
function cleanDist() {
  const distDir = path.resolve("build/tailwind");
  try {
    fs.rmSync(distDir, { recursive: true, force: true });
    console.info(`Removed ${distDir}`);
  } catch (err) {
    console.error(`No existing ${distDir} to remove`, err);
  }

  fs.mkdirSync(distDir, { recursive: true });
  logger.success(`Created fresh ${distDir}`);
}

// --------------------------
// 2) Register Custom Transformers
// --------------------------

//Kebab case transformer for css variables, as for some reason style-dictionary does not have this built in
//E.g "buttonErrorBg" => "button-error-bg"
function kebabCase(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}

StyleDictionary.registerTransform({
  name: "name/cti/kebab",
  type: "name",
  transform: (token) => {
    return kebabCase(token.name);
  },
});

// We will use some built-in transforms also
const defaultTransforms = ["attribute/cti", "color/css", "size/px"];
// --------------------------
// 3) Prepend Note
// --------------------------
function prependAutogeneratedNote(content) {
  const dateTime = new Date().toLocaleString();
  return `/* Autogenerated file. Generated at ${dateTime}. Do not edit.*/\n${content}`;
}

// --------------------------
// 4) A helper to produce JS code with unquoted keys
// --------------------------
function isValidJSKey(key) {
  // Basic check for valid JS identifier: a-z, A-Z, 0-9, _, $
  // cannot start with digit
  return /^[A-Za-z_$][A-Za-z0-9_$]*$/.test(key);
}

function jsify(value, indent = 2) {
  if (typeof value === "string") {
    // escape internal quotes if needed, or keep it simple
    return `"${value}"`;
  }

  // For arrays
  if (Array.isArray(value)) {
    const arrContent = value.map((v) => jsify(v, indent + 2)).join(", ");
    return `[${arrContent}]`;
  }

  // For objects
  if (typeof value === "object" && value !== null) {
    let spaces = " ".repeat(indent);
    let result = "{\n";
    const entries = Object.entries(value);
    entries.forEach(([k, v], index) => {
      let keyName = isValidJSKey(k) ? k : `'${k}'`;
      result += `${spaces}${keyName}: ${jsify(v, indent + 2)}`;
      if (index < entries.length - 1) {
        result += ",";
      }
      result += "\n";
    });
    result += " ".repeat(indent - 2) + "}";
    return result;
  }

  // For numbers, booleans, null, undefined, etc.
  return String(value);
}

// --------------------------
// 5) Register Custom Formats
// --------------------------
// StyleDictionary.registerFormat({
//   name: "css/base",
//   format: ({ dictionary }) => {
//     const body = `:root {\n${dictionary.allTokens
//       .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
//       .join("\n")}\n}`;
//     return prependAutogeneratedNote(body);
//   },
// });
//
// StyleDictionary.registerFormat({
//   name: "css/dark",
//   format: ({ dictionary }) => {
//     const body = `.dark {\n${dictionary.allTokens
//       .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
//       .join("\n")}\n}`;
//     return prependAutogeneratedNote(body);
//   },
// });

StyleDictionary.registerFormat({
  name: "css/index-file",
  format: () => {
    const body = `
/* Import Generated Design Token Files */
@import "./base.css";
@import "./dark.css";

/* Tailwind Base, Components, and Utilities */
@tailwind base;
@tailwind components;
@tailwind utilities;
`.trimStart();
    return prependAutogeneratedNote(body);
  },
});

// --------------------------
// 6) TAILWIND CONFIG FORMAT
// Using `jsify()` to produce a JS object with unquoted keys.
// --------------------------
StyleDictionary.registerFormat({
  name: "tailwind/config",
  format({ dictionary }) {
    const tailwindConfig = {
      darkMode: "class",
      content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
      theme: {
        extend: {},
      },
      plugins: [],
    };

    // Helper to set nested object properties
    function setNestedProperty(obj, pathArray, value) {
      let current = obj;
      for (let i = 0; i < pathArray.length; i++) {
        const key = pathArray[i];
        if (i === pathArray.length - 1) {
          current[key] = value;
        } else {
          if (!current[key]) {
            current[key] = {};
          }
          current = current[key];
        }
      }
    }

    // For each token, place in tailwindConfig.theme.extend.<path>
    dictionary.allTokens.forEach((token) => {
      // Because we have "name/cti/kebab" in our transforms, `token.name` is already kebab-case
      const varRef = `var(--${token.name})`;

      // Turn "button-error-bg" => ["button","error","bg"]
      const segments = token.name.split("-");
      setNestedProperty(tailwindConfig.theme.extend, segments, varRef);
    });

    // Build a JavaScript code string (no quotes on keys)
    const configObjectStr = jsify(tailwindConfig, 2);
    const configBody = `/** @type {import('tailwindcss').Config} */
export default ${configObjectStr};
`;

    return prependAutogeneratedNote(configBody);
  },
});

// --------------------------
// 7) Build Script
// --------------------------
async function buildTokens() {
  cleanDist();

  // Light
  {
    console.log("Building base theme...");
    const SD = new StyleDictionary({
      source: [
        "tokens/**/!(*.dark).json", // all .json files that do NOT end with .dark.json
      ],
      log: { verbosity: "verbose" },
      platforms: {
        base: {
          transformGroup: "css",
          transforms: defaultTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "base.css",
              format: "css/variables",
              options: {
                outputReferences: true,
              },
            },
            {
              destination: "index.css",
              format: "css/index-file",
            },
          ],
        },
        tailwind: {
          transformGroup: "js",
          transforms: [
            "attribute/cti",
            "name/cti/kebab",
            "size/px",
            "color/css",
          ],
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "tailwind.config.js",
              format: "tailwind/config",
            },
          ],
        },
      },
    });
    SD.buildAllPlatforms();
    logger.success("Base theme built!");
  }

  // Dark
  {
    console.log("Building dark theme...");
    const SD = new StyleDictionary({
      source: [
        "tokens/**/*(*.dark).json", // only dark files
      ],
      log: { verbosity: "verbose" },
      platforms: {
        base: {
          transformGroup: "css",
          transforms: defaultTransforms,
          buildPath: "build/tailwind/",
          files: [
            {
              destination: "dark.css",
              format: "css/variables",
              options: {
                selector: ".dark",
                outputReferences: true,
              },
            },
          ],
        },
      },
    });
    SD.buildAllPlatforms();
    logger.success("Dark theme built!");
  }

  logger.success("All builds finished!");
}

buildTokens().catch((err) => {
  console.error("Error building tokens:", err);
  process.exit(1);
});
