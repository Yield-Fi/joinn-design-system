import StyleDictionaryModule from "style-dictionary";
import { makeSdTailwindConfig } from "sd-tailwindcss-transformer";

const PREFIX = "";

const sdConfig = makeSdTailwindConfig({
  type: "light",
  formatType: "js",
  isVariables: true,
  prefix: PREFIX,
  extend: true,
  source: [`./tokens/*.json`],
  transforms: ["attribute/cti", "name/kebab"],
  buildPath: "./build/tailwind/",
  tailwind: {
    content: [
      "./pages/**/*.{js,ts,jsx,tsx}",
      "./components/**/*.{js,ts,jsx,tsx}",
    ],
    plugins: ["typography", "container-queries"],
  },
});

sdConfig.platforms["css"] = {
  prefix: PREFIX,
  transformGroup: "css",
  buildPath: "./build/tailwind/",
  files: [
    {
      destination: "tailwind.css",
      format: "css/variables",
    },
  ],
};

const StyleDictionary = new StyleDictionaryModule(sdConfig);

// Custom format for global variables
StyleDictionary.registerFormat({
  name: "css/global",
  format: ({ dictionary }) => {
    return `:root {\n${dictionary.allTokens
      .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
      .join("\n")}\n}`;
  },
});

// Custom format for light mode variables
StyleDictionary.registerFormat({
  name: "css/light",
  format: ({ dictionary }) => {
    return `:root {\n${dictionary.allTokens
      .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
      .join("\n")}\n}`;
  },
});

// Custom format for dark mode variables
StyleDictionary.registerFormat({
  name: "css/dark",
  format: ({ dictionary }) => {
    return `.dark {\n${dictionary.allTokens
      .map((token) => `  ${generateVariableName(token)}: ${token.$value};`)
      .join("\n")}\n}`;
  },
});

// Filters to include tokens based on their theme attribute
StyleDictionary.registerFilter({
  name: "isGlobal",
  filter: (token) => token.attributes?.theme === "global",
});

StyleDictionary.registerFilter({
  name: "isLight",
  filter: (token) => token.attributes?.theme === "light",
});

StyleDictionary.registerFilter({
  name: "isDark",
  filter: (token) => token.attributes?.theme === "dark",
});

await StyleDictionary.hasInitialized;
await StyleDictionary.buildAllPlatforms();
